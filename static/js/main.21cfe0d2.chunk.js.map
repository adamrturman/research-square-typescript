{"version":3,"sources":["components/ExpensiveOrder/ExpensiveOrder.tsx","components/MostCustomerOrders/MostCustomerOrders.tsx","components/YearsChart/YearsChart.tsx","components/TotalOrdersByYear/TotalOrdersByYear.tsx","components/LoadingSpinner/LoadingSpinner.tsx","services/dataService.js","styles/img/research-square-logo.svg","App.tsx","reportWebVitals.ts","index.tsx","styles/App.module.css","styles/Components.module.css"],"names":["ExpensiveOrder","props","totalPrices","orders","map","order","total_price","maxTotalPrice","Math","max","className","styles","green","MostCustomerOrdersRow","customers","console","log","maxOrderId","maxOrderCustomerId","find","customer_id","findMaxOrderCustomerId","maxCustomerName","customer","id","name","DataChart","totals","length","years","total","year","amounts","info","labels","datasets","label","data","fill","backgroundColor","borderColor","TotalOrdersByYears","totalPriceOfOrders","reduce","accumulator","orderYear","Date","created_date","getFullYear","has","currentSumByYear","get","set","Map","arrayOfTotalsByYear","Array","from","formattedTotalsByYear","YearsChart","LoadingSpinner","Spinner","animation","variant","role","a","axios","App","useState","isLoaded","setIsLoaded","setOrders","setCustomers","useEffect","fetchData","then","catch","error","alert","app","logo","src","alt","MostCustomerOrders","TotalOrdersByYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.21cfe0d2.chunk.js","sourcesContent":["import React from 'react';\nimport styles from '../../styles/Components.module.css';\n\ninterface Item {\n    name: string;\n    price: number\n}\n\ninterface Order {\n    id: string;\n    customer_id: string;\n    created_date: string;\n    fulfilled_date: string;\n    items: Item[];\n    total_price: number\n}\n\ninterface Props {\n    orders: Order[];\n}\n\nfunction ExpensiveOrder(props:Props) {\n    const totalPrices = props.orders.map((order:Order) => {\n        return order.total_price;\n    });\n    const maxTotalPrice:number = Math.max(...totalPrices);\n    return (\n        <h2>\n            Most Expensive Order: <span className={styles.green}>${maxTotalPrice}</span>\n        </h2>\n    );\n}\n\nexport default ExpensiveOrder;","import React from 'react';\nimport styles from '../../styles/Components.module.css';\n\ninterface Item {\n    name: string;\n    price: number\n}\n\ninterface Order {\n    id: string;\n    customer_id: string;\n    created_date: string;\n    fulfilled_date: string;\n    items: Item[];\n    total_price: number\n}\n\ninterface Customer {\n    id: string;\n    created_date: string;\n    email: string;\n    name: string;\n}\n\ninterface Props {\n    orders: Order[];\n    customers: Customer[];\n}\n\nfunction MostCustomerOrdersRow(props:Props) {\n    const {orders, customers} = props;\n    console.log(customers)\n\n    function findMaxOrderCustomerId() {\n        const totalPrices = orders.map((order:Order) => {\n            return order.total_price;\n        });\n    \n        const maxTotalPrice = Math.max(...totalPrices);\n    \n        const maxOrder:any = orders.find((order:Order) => order.total_price === maxTotalPrice);\n\n        return maxOrder.customer_id;\n    }\n\n    function findCustomerWithMaxOrder(maxOrderId:any) {\n        const foundCustomer:any = customers.find((customer:any) => customer.id === maxOrderId);\n        return foundCustomer.name;\n    }\n\n    const maxOrderCustomerId:string = findMaxOrderCustomerId();\n    const maxCustomerName:string = findCustomerWithMaxOrder(maxOrderCustomerId);\n\n    return (\n        <h2>\n            Customer with the most orders= <span className={styles.green}>{maxCustomerName}</span>\n        </h2>\n    );\n}\n\nexport default MostCustomerOrdersRow;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\ninterface Total {\n    year: Date;\n    total: number;\n}\n\ninterface Props {\n    totals: Total[];\n}\n\nfunction DataChart(props: Props) {\n\n    const { totals } = props;\n\n    if (totals && totals.length > 0) {\n        const years: any = totals.map((total: Total) => {\n            return total.year;\n        });\n\n        const amounts: any[] = totals.map((total: Total) => {\n            return total.total;\n        });\n\n        const info: object = {\n            labels: [...years],\n            datasets: [\n                {\n                    label: \"Total Purchases by Year\",\n                    data: [...amounts],\n                    fill: true,\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\n                    borderColor: \"rgba(75,192,192,1)\"\n                },\n            ]\n\n        };\n        return (\n            <div>\n                <Bar data={info} />\n            </div>\n        );\n    }\n    return null;\n}\n\nexport default DataChart;","import React from 'react';\nimport YearsChart from '../YearsChart/YearsChart';\nimport styles from '../../styles/Components.module.css';\n\ninterface Item {\n    name: string;\n    price: number\n}\n\ninterface Order {\n    id: string;\n    customer_id: string;\n    created_date: string;\n    fulfilled_date: string;\n    items: Item[];\n    total_price: number\n}\n\ninterface Props {\n    orders: Order[];\n\n}\n\n// interface Map<Key, Value> {\n//     get(key: Key): Value | undefined;\n//     has(key: Key): boolean;\n//     set(key: Key, value: Value): this;\n// }\n\ninterface Totals {\n    year: Date;\n    total: number;\n}\n\nfunction TotalOrdersByYears(props:Props) {\n    function getOrdersSumByYear() {\n        const sumByYear = props.orders.reduce((accumulator:any, order:Order) => {\n            const orderYear = new Date(order.created_date).getFullYear();\n\n            if (accumulator.has(orderYear)) {\n                const currentSumByYear = accumulator.get(orderYear);\n                accumulator.set(orderYear, currentSumByYear + order.total_price);\n            } else {\n                accumulator.set(orderYear, order.total_price)\n            }\n            \n            return accumulator;\n        }, new Map());\n\n        return sumByYear;\n    }\n\n    const totalPriceOfOrders:any = getOrdersSumByYear()\n    console.log(totalPriceOfOrders)\n\n    // converting the totalPriceOfOrders Map into an array of objects, each contains the year and order total\n    const arrayOfTotalsByYear:Totals[] = Array.from(totalPriceOfOrders, ([year, total]) => ({ year, total }));\n\n    const formattedTotalsByYear = arrayOfTotalsByYear.map(year => (\n        <li>{year.year} - ${year.total}</li>\n    ));\n\n    return (\n        <>\n            <h2>\n                Total Orders by year: <span className={styles.green}>{formattedTotalsByYear}</span>\n            </h2>\n            <YearsChart totals={arrayOfTotalsByYear} />\n        </>\n    );\n}\n\nexport default TotalOrdersByYears;\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap';\n\nfunction LoadingSpinner() {\n    return (\n        <div>\n            <Spinner animation=\"border\" variant=\"primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div >\n    )\n}\n\nexport default LoadingSpinner","import axios from 'axios'\n\nexport async function fetchData(){\n    return axios.get(\"https://cors-anywhere.herokuapp.com/https://rs-coding-exercise.s3.amazonaws.com/2020/orders-2020-02-10.json\");\n}","export default __webpack_public_path__ + \"static/media/research-square-logo.63a69446.svg\";","import React, { useState, useEffect } from 'react';\nimport ExpensiveOrder from './components/ExpensiveOrder/ExpensiveOrder';\nimport MostCustomerOrders from './components/MostCustomerOrders/MostCustomerOrders';\nimport TotalOrdersByYears from './components/TotalOrdersByYear/TotalOrdersByYear';\nimport LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';\nimport { fetchData } from './services/dataService';\nimport styles from './styles/App.module.css';\nimport logo from './styles/img/research-square-logo.svg';\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [customers, setCustomers] = useState([]);\n\n  useEffect(() => {\n      fetchData()\n      .then(({ data }) => {\n        setOrders(data.orders);\n        setCustomers(data.customers);\n        setIsLoaded(true);\n      })\n      .catch(error => alert(error))\n  }, []);\n\n  if(!isLoaded) {\n    return <LoadingSpinner />;\n  } else {\n\n  return (\n    <div className={styles.app}>\n        <img className={styles.logo} src={logo} alt=\"logo\"/>\n        <hr/>\n        <ExpensiveOrder orders={orders} />\n        <MostCustomerOrders orders={orders} customers={customers}/>\n        <TotalOrdersByYears orders={orders} />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__101rE\",\"logo\":\"App_logo__7IXQI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green\":\"Components_green__2Q4pZ\"};"],"sourceRoot":""}